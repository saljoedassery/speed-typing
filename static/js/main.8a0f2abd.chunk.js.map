{"version":3,"sources":["images/speed.svg","images/target.svg","components/Typing.js","components/Details.js","components/MainComponent.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Typing","props","init","timerRunning","correctWords","wordsList","text","split","status","i","length","letterStatus","tempWordList","push","j","setState","letters","inputDisabled","inputValue","currentActiveLetter","currentActiveWord","findResult","console","log","setWordCount","totalLettersTyped","state","correctLetters","join","match","correct","setStarted","Promise","resolve","reject","onChange","event","target","value","trim","onKeyPress","key","currentWordLength","slice","keyCode","then","this","prevProps","reset","letterIndex","className","map","word","index","letter","ind","type","autoFocus","onKeyDown","disabled","placeholder","React","Component","Details","time","stopCountDown","tick","timeUp","startCountDown","intervalHandle","setInterval","clearInterval","finishGame","timeInSec","src","speedIcon","alt","wpm","accuracyIcon","accuracy","totalWords","incorrectWords","onClick","resetGame","MainComponent","texts","Math","floor","random","setCorrectAndIncorrectWords","incorrect","incorrectLetters","timeInMin","netWPM","toFixed","Header","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a0f2abd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/speed.1f766eca.svg\";","module.exports = __webpack_public_path__ + \"static/media/target.a17d4568.svg\";","import React from \"react\";\n\nclass Typing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordsList: [],\n      status: [],\n      currentActiveWord: 0,\n      inputValue: \"\",\n      letters: [],\n      letterStatus: [],\n      currentActiveLetter: 0,\n      inputDisabled: false,\n    };\n    this.correctWords = 0;\n    this.timerRunning = false;\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.reset !== this.props.reset) this.init();\n    if(prevProps.inputDisabled !== this.props.inputDisabled)\n      this.findResult()\n  }\n\n  init = () => {\n    this.timerRunning = false;\n    this.correctWords = 0\n    var wordsList = this.props.text.split(\" \");\n    var status = [];\n    for (var i = 0; i < wordsList.length; i++) {\n      status[i] = \"inactive\";\n    }\n    status[0] = \"active\";\n    var letterStatus = [];\n\n    var tempWordList = this.props.text.split(\"\");\n    tempWordList.push(\" \");\n    for (var j = 0; j < tempWordList.length; j++) {\n      letterStatus[j] = \"letter-inactive\";\n    }\n    letterStatus[0] = \"letter-active\";\n\n    this.setState({\n      wordsList: wordsList,\n      status: status,\n      letterStatus: letterStatus,\n      letters: tempWordList,\n      inputDisabled: false,\n      inputValue: \"\",\n      currentActiveLetter: 0,\n      currentActiveWord: 0,\n    });\n  };\n\n  findResult = () => {\n    console.log(\"find result called\")\n    this.setWordCount(this.correctWords);\n    this.setState({inputDisabled: true})\n    //find the speed and accuracy\n    var totalLettersTyped = this.state.currentActiveLetter\n    var correctLetters = (this.state.letterStatus.join(\"\").match(/letter-valid/g) || []).length\n    this.props.findResult(totalLettersTyped, totalLettersTyped - correctLetters)\n  };\n\n  setWordCount = (correct) => {\n    this.props.setWordCount(correct, this.state.currentActiveWord - correct);\n  };\n\n  setStarted = () => {\n    this.props.setStarted();\n    const promise = new Promise(function(resolve, reject) {\n      resolve('Success!');\n    });\n    return promise\n  };\n\n  onChange = (event) => {\n    this.setState({ inputValue: event.target.value.trim() });\n  };\n\n  onKeyPress = (event) => {\n    var letters = this.state.letters;\n    var currentActiveLetter = this.state.currentActiveLetter;\n    var letterStatus = this.state.letterStatus;\n    var currentActiveWord = this.state.currentActiveWord;\n    var status = this.state.status;\n    var wordsList = this.state.wordsList;\n    var inputValue = this.state.inputValue;\n\n    if (event.key.length === 1) {\n      if (!this.timerRunning) {\n        this.timerRunning = true;\n        this.setStarted();\n      }\n\n      if (event.key === letters[currentActiveLetter]) {\n        letterStatus[currentActiveLetter] = \"letter-valid\";\n      } else {\n        letterStatus[currentActiveLetter] = \"letter-invalid\";\n      }\n\n      //if it is last letter of the word, make the current word inacive\n      var currentWordLength =\n        wordsList.length <= currentActiveWord\n          ? 0\n          : wordsList[currentActiveWord].length - 1;\n      if (\n        letters\n          .slice(\n            currentActiveLetter - currentWordLength,\n            currentActiveLetter + 1\n          )\n          .join(\"\") === wordsList[currentActiveWord]\n      ) {\n        // console.log(\"last letter or the word pressed\");\n        status[currentActiveWord] = \"inactive\";\n        currentActiveWord += 1;\n      }\n\n      //   if the currently active letter is space highlight no word\n      if (letters[currentActiveLetter] === \" \") {\n        status[currentActiveWord] = \"active\";\n      }\n\n      currentActiveLetter += 1;\n      letterStatus[currentActiveLetter] = \"letter-active\";\n\n      //if space pressed\n      if (event.keyCode === 32 || event.keyCode === 0) {\n        // check if the last word is correct\n        if (wordsList[currentActiveWord - 1] === inputValue) {\n          this.correctWords += 1;\n        }\n        if (wordsList.length <= currentActiveWord) {\n          currentActiveLetter -= 1\n          letterStatus[currentActiveLetter] = \"letter-inactive\";\n          this.setStarted().then(()=>\n            this.findResult()\n          )\n        }\n\n        inputValue = \"\";\n      }\n\n      \n\n      this.setState({\n        currentActiveLetter: currentActiveLetter,\n        letterStatus: letterStatus,\n        currentActiveWord: currentActiveWord,\n        status: status,\n        inputValue: inputValue\n      });\n    }\n    //if backspace pressed\n    else if (event.key === \"Backspace\") {\n      // console.log(\"Backspace pressed\");\n\n      //if input field has some value on it\n      if (inputValue.length > 0) {\n        //moving a letter back\n        letterStatus[currentActiveLetter] = \"letter-inactive\";\n\n        //moved back from space\n        if (letters[currentActiveLetter] === \" \") {\n          currentActiveWord -= 1;\n          status[currentActiveWord] = \"active\";\n        }\n\n        currentActiveLetter -= 1;\n        letterStatus[currentActiveLetter] = \"letter-active\";\n\n        // moving a word back if current active letter is word's last letter\n        if (letters[currentActiveLetter] === \" \") {\n          status[currentActiveWord] = \"inactive\";\n        }\n        // console.log(\"active word: \" + wordsList[currentActiveWord]);\n        this.setState({\n          currentActiveLetter: currentActiveLetter,\n          letterStatus: letterStatus,\n          status: status,\n          currentActiveWord: currentActiveWord,\n        });\n      }\n    }\n  };\n\n  render() {\n    var letterIndex = 0;\n    return (\n      <div className=\"typing\">\n        <div className=\"input-section\">\n          <div className=\"text-area\">\n            <p>\n              {this.state.wordsList.map((word, index) => (\n                <>\n                  <span\n                    className={\"word \" + this.state.status[index]}\n                    key={\"word\" + index}\n                  >\n                    {word.split(\"\").map((letter, ind) => (\n                      <span\n                        className={this.state.letterStatus[letterIndex++]}\n                        key={\"letter\" + letterIndex}\n                      >\n                        {letter}\n                      </span>\n                    ))}\n                  </span>\n                  <span\n                    className={\n                      \"space \" + this.state.letterStatus[letterIndex++]\n                    }\n                    key={\"space\" + index}\n                  ></span>\n                </>\n              ))}\n            </p>\n          </div>\n          <input\n            type=\"text\"\n            className=\"text-input\"\n            autoFocus={true}\n            onKeyDown={this.onKeyPress}\n            value={this.state.inputValue}\n            onChange={this.onChange}\n            disabled={this.state.inputDisabled}\n            placeholder=\"Start typing...\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Typing;\n","import React from \"react\";\nimport speedIcon from \"../images/speed.svg\";\nimport accuracyIcon from \"../images/target.svg\";\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { time: 60 };\n    this.intervalHandle = null;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.reset !== this.props.reset) {\n      this.init();\n    } else if (prevProps.timerRunning !== this.props.timerRunning) {\n      if (this.props.timerRunning) this.startCountDown();\n      else {\n        console.log(\"Game finished before time is up!!\");\n        this.stopCountDown();\n        this.finishGame(10 - this.state.time);\n      }\n    }\n  }\n\n  init = () => {\n    this.setState({ time: 60 });\n    this.stopCountDown();\n  };\n\n  tick = () => {\n    //function to change the time\n    var time = this.state.time - 1;\n    if (time <= 0) {\n      console.log(\"Time up\");\n      this.stopCountDown();\n      this.timeUp(0);\n    }\n    if (time < 10) {\n      time = \"0\" + time;\n    }\n    this.setState({ time: time });\n  };\n\n  startCountDown = () => {\n    console.log(\"Countdown started\");\n    this.intervalHandle = setInterval(this.tick, 1000);\n  };\n\n  stopCountDown = () => {\n    console.log(\"stopping countdown\");\n    clearInterval(this.intervalHandle);\n  };\n\n  timeUp = () => {\n    this.props.timeUp();\n  };\n\n  finishGame = (timeInSec) => {\n    this.props.finishGame(timeInSec);\n  };\n\n  render() {\n    return (\n      <div className=\"details\">\n        <div className=\"details-content\">\n          <div className=\"time-section\">\n            <p>0:{this.state.time}s</p>\n          </div>\n\n          <div className=\"speed-section\">\n            <span className=\"speed-heading-section\">\n              <img src={speedIcon} alt=\"speed icon\" />\n              <p className=\"speed-heading\">SPEED</p>\n            </span>\n\n            <p className=\"speed-value\">\n              {this.props.wpm}\n              <span>WPM</span>\n            </p>\n          </div>\n\n          <div className=\"speed-section\">\n            <span className=\"speed-heading-section\">\n              <img src={accuracyIcon} alt=\"accuracy icon\" />\n              <p className=\"speed-heading\">ACCURACY</p>\n            </span>\n\n            <p className=\"speed-value\">\n              {this.props.accuracy}\n              <span>%</span>\n            </p>\n          </div>\n\n          <div className=\"word-count-section\">\n            <p className=\"total-word-count\">\n              Total words: <span>{this.props.totalWords}</span>\n            </p>\n            <p className=\"correct-word-count\">\n              Correct words: <span>{this.props.correctWords}</span>\n            </p>\n            <p className=\"incorrect-word-count\">\n              Incorrect words: <span>{this.props.incorrectWords}</span>\n            </p>\n          </div>\n          <button\n            className=\"reset-button\"\n            onClick={() => {\n              console.log(\"Reset button clicked\");\n              this.props.resetGame();\n            }}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n","import React from \"react\";\nimport Typing from \"./Typing\";\nimport Details from \"./Details\";\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerRunning: false,\n      correctWords: 0,\n      incorrectWords: 0,\n      reset: false,\n      inputDisabled: false,\n      wpm: 0,\n      accuracy: 100,\n    };\n    this.timeInSec = 60;\n    this.texts = [\n      \"Another productive way to use this tool to begin a daily writing routine. One way is to generate a random paragraph with the intention to try to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\",\n      \"A random paragraph can also be an excellent way for a writer to tackle writers' block. Writing block can often happen due to being stuck with a current project that the writer is trying to complete. By inserting a completely random paragraph from which to begin, it can take down some of the issues that may have been causing the writers' block in the first place.\",\n      \"Another writing challenge can be to take the individual sentences in the paragraph and incorporate a single sentence from that into a new paragraph to create a short story. Unlike the random sentence generator, the sentences from the paragraph will have some connection to one another so it will be different. You also won't know exactly how many sentences will appear in the paragraph.\",\n      \"It's not only writers who can benefit from this free online tool. If you're a programmer who's working on a project where blocks of text are needed, this tool can be a great way to get that. It's a good way to test your programming and that the tool being created is working well. Above are a few examples of how the random paragraph generator can be beneficial.\",\n      \"If you do find this paragraph tool useful, please do us a favor and let us know how you're using it. It's greatly beneficial for us to know the different ways this tool is being used so we can improve it with updates. This is especially true since there are times when the generators we create get used in completely unanticipated ways from when we initially created them.\",\n      \"In this exercise, the idea is to write a paragraph that would be a random passage from a story. An effective paragraph is one that has unity (it isn’t a hodgepodge of things), focus (everything in the paragraph stacks up to the whatever-it-is the paragraph is about), and coherence (the content follows smoothly). For this exercise, the paragraph should be quick to read.\",\n      \"She made an attempt to straighten her tawny hair. Her voice quavered with emotion. “You must be a very lonely man, Judge Seagrave.” Then she turned a gaze on him that might have ignited a rain-sodden haystack. And I’m a lonely woman. It might be merely descriptive: Lines of weeds criss-crossed the cracked parking lot of the Seashell Motor Courts.\", \n      \"The flaking paint on the buildings had chalked to a pastel pink on walls covered with graffiti. Many of the windows had been smashed out. Where the sign had been, atop rusting steel posts, only the metal outline of a seashell remained. It might have action but no dialogue. Above ground was the medieval settlement of Skaar’s Outpost, a fort to guard the cave entrance.\", \n      \"Terry didn't consider himself particularly unusual. Sure, he spent his teenage years as a willing and sometimes absurdly cheerful social outcast, upon adulthood immediately transitioned to playing side-kick to a magic-savvy private investigator, accidentally became the confidant of an apparently ageless time-traveler, and just recently declared war on a corporation.\" ,\n      \"Silence should be safe. Silence should tell him, even in the dark, that nothing approached him, that nothing nearby could hurt him. Nonetheless, he began to long for noise, especially for the noise of straight-forward confrontation. To fight an enemy directly would be a blessing compared to stumbling blind, searching for the voiceless, already destroyed him twice.\"\n    ];\n\n    this.text = this.texts[Math.floor(Math.random() * 10)];\n  }\n\n  setStarted = () => {\n    this.setState({ timerRunning: !this.state.timerRunning });\n  };\n\n  resetGame = () => {\n    console.log(\"reset game called\");\n    this.text = this.texts[Math.floor(Math.random() * 10)];\n    this.timeInSec = 60;\n    this.setState({\n      reset: !this.state.reset,\n      correctWords: 0,\n      incorrectWords: 0,\n      timerRunning: false,\n      wpm: 0,\n      accuracy: 100,\n    });\n  };\n\n  setCorrectAndIncorrectWords = (correct, incorrect) => {\n    this.setState({ correctWords: correct, incorrectWords: incorrect });\n  };\n\n  timeUp = () => {\n    this.setState({ inputDisabled: true });\n  };\n\n  finishGame = (timeInSec) => {\n    console.log(\"Time took to finish: \", timeInSec);\n    this.timeInSec = timeInSec;\n  };\n\n  findResult = (totalLettersTyped, incorrectLetters) => {\n    console.log(\n      \"Total letters typed: \" +\n        totalLettersTyped +\n        \" incorrect letters: \" +\n        incorrectLetters +\n        \"timeInSec: \" +\n        this.timeInSec\n    );\n    var timeInMin = this.timeInSec / 60;\n    var grossWPM = totalLettersTyped / 5 / timeInMin;\n    var netWPM = grossWPM - incorrectLetters / timeInMin;\n    netWPM = netWPM.toFixed(2);\n    var accuracy =\n      ((totalLettersTyped - incorrectLetters) * 100) / totalLettersTyped;\n    accuracy = accuracy.toFixed(1);\n    console.log(\"WPM: \" + netWPM + \" accuracy: \" + accuracy);\n    this.setState({ wpm: netWPM, accuracy: accuracy });\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Typing\n          setStarted={this.setStarted}\n          text={this.text}\n          setWordCount={(correct, incorrect) =>\n            this.setCorrectAndIncorrectWords(correct, incorrect)\n          }\n          reset={this.state.reset}\n          inputDisabled={this.state.inputDisabled}\n          findResult={(totalLettersTyped, incorrectLetters) =>\n            this.findResult(totalLettersTyped, incorrectLetters)\n          }\n        />\n        <Details\n          timerRunning={this.state.timerRunning}\n          totalWords={this.text.split(\" \").length}\n          correctWords={this.state.correctWords}\n          incorrectWords={this.state.incorrectWords}\n          resetGame={this.resetGame}\n          reset={this.state.reset}\n          timeUp={this.timeUp}\n          finishGame={(timeInSec) => this.finishGame(timeInSec)}\n          wpm={this.state.wpm}\n          accuracy={this.state.accuracy}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MainComponent;\n","import React from 'react'\n\nclass Header extends React.Component {\n    render () {\n        return (\n            <div className=\"header\">\n                <h1>Typing Speed Test</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport Header from './components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}